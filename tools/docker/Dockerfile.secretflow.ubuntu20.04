FROM ubuntu:20.04

LABEL maintainer="Qing Li <geding.lq@antgroup.com>"

#The default shell for the RUN instruction is ["/bin/sh", "-c"], which sometimes cause unexpected error
#for example "source a_file". Use bash as default shell instead.
SHELL ["/bin/bash", "-c"]

RUN apt-get update && DEBIAN_FRONTEND="noninteractive" apt-get install -y --no-install-recommends \
        alien \
        astyle \
        autoconf \
        automake \
        bison \
        build-essential \
        ca-certificates \
        cmake \
        curl \
        debhelper \
        expect \
        g++ \
        gawk \
        gdb \
        git-core \
        jq \
        kmod \
        lcov \
        libboost-system-dev \
        libboost-thread-dev \
        libclang-dev \
        libcurl4-openssl-dev \
        libfuse-dev \
        libjsoncpp-dev \
        liblog4cpp5-dev \
        libprotobuf-c-dev \
        libprotobuf-dev \
        libssl-dev \
        libtool \
        libxml2-dev \
        nano \
        ocaml \
        ocamlbuild \
        pkg-config \
        protobuf-compiler \
        python-is-python3 \
        python3-pip \
        sudo \
        unzip \
        uuid-dev \
        wget \
        zip \
        gnupg \
        aptitude \
        rsync \
        cpuid \
        && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    apt upgrade -y

RUN apt update && apt update -y
RUN echo "ca_directory=/etc/ssl/certs" >> /etc/wgetrc && \
    echo 'deb [arch=amd64] https://download.01.org/intel-sgx/sgx_repo/ubuntu focal main' | tee /etc/apt/sources.list.d/intel-sgx.list &&\
    wget -qO - https://download.01.org/intel-sgx/sgx_repo/ubuntu/intel-sgx-deb.key --no-check-certificate | apt-key add -

# Install cpuid tool for tests
# WORKDIR /tmp
# RUN wget http://www.etallen.com/cpuid/cpuid-20200211.x86_64.tar.gz && \
#    tar -xf ./cpuid-20200211.x86_64.tar.gz && \
#    cp ./cpuid-20200211/cpuid /usr/bin/ && \
#    rm -rf /tmp/cpuid-20200211*

# Install Rust
ENV PATH="/root/.cargo/bin:$PATH"
ENV OCCLUM_RUST_VERSION=nightly-2022-02-23
RUN curl https://sh.rustup.rs -sSf | \
        sh -s -- --default-toolchain ${OCCLUM_RUST_VERSION} -y && \
    rm -rf /root/.cargo/registry && rm -rf /root/.cargo/git && \
    cargo -V

# Install SGX PSW
ARG PSW_VERSION=2.17.100.3
ARG DCAP_VERSION=1.14.100.3
RUN apt-get update && aptitude install -y \
        libsgx-launch-dev=$PSW_VERSION-focal1 \
        libsgx-epid-dev=$PSW_VERSION-focal1 \
        libsgx-quote-ex-dev=$PSW_VERSION-focal1 \
        libsgx-urts=$PSW_VERSION-focal1 \
        libsgx-enclave-common=$PSW_VERSION-focal1 \
        libsgx-uae-service=$PSW_VERSION-focal1 \
        libsgx-ae-epid=$PSW_VERSION-focal1 \
        libsgx-ae-le=$PSW_VERSION-focal1 \
        libsgx-ae-pce=$PSW_VERSION-focal1 \
        libsgx-aesm-launch-plugin=$PSW_VERSION-focal1 \
        sgx-aesm-service=$PSW_VERSION-focal1 \
        libsgx-aesm-launch-plugin=$PSW_VERSION-focal1 \
        libsgx-aesm-pce-plugin=$PSW_VERSION-focal1 \
        libsgx-aesm-ecdsa-plugin=$PSW_VERSION-focal1 \
        libsgx-aesm-epid-plugin=$PSW_VERSION-focal1 \
        libsgx-aesm-quote-ex-plugin=$PSW_VERSION-focal1 \
        libsgx-ae-id-enclave=$DCAP_VERSION-focal1 \
        libsgx-ae-qe3=$DCAP_VERSION-focal1 \
        libsgx-ae-qve=$DCAP_VERSION-focal1 \
        libsgx-dcap-quote-verify=$DCAP_VERSION-focal1 \
        libsgx-dcap-quote-verify-dev=$DCAP_VERSION-focal1 \
        libsgx-dcap-ql=$DCAP_VERSION-focal1 \
        libsgx-dcap-ql-dev=$DCAP_VERSION-focal1 \
        libsgx-epid=$PSW_VERSION-focal1 \
        libsgx-quote-ex=$PSW_VERSION-focal1 \
        libsgx-pce-logic=$DCAP_VERSION-focal1 \
        libsgx-qe3-logic=$DCAP_VERSION-focal1 \
        libsgx-launch=$PSW_VERSION-focal1 \
        libsgx-dcap-default-qpl=$DCAP_VERSION-focal1 \
        && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    ln -s /usr/lib/x86_64-linux-gnu/libsgx_enclave_common.so.1 /usr/lib/x86_64-linux-gnu/libsgx_enclave_common.so

# Install SGX SDK
WORKDIR /tmp
RUN git clone -b sgx_2.17.1_for_occlum https://github.com/occlum/linux-sgx && \
    mkdir /etc/init && \
    cd linux-sgx && \
    make preparation && \
    ./compile_and_install.sh no_mitigation USE_OPT_LIBS=3 && \
    echo 'source /opt/intel/sgxsdk/environment' >> /root/.bashrc && \
    rm -rf /tmp/linux-sgx

# Download the Occlum source and do some clean
# Remove default occlum signer key and demos
# Users should generate the signer key themselves
# "openssl genrsa -out signer_key.pem -3 3072"
# "occlum build --sign-key signer_key.pem"
ARG OCCLUM_BRANCH
WORKDIR /root
RUN git clone -b $OCCLUM_BRANCH https://github.com/occlum/occlum && \
    cd /root/occlum/tools/toolchains/ && \
    cd musl-gcc && ./build.sh && ./install_zlib.sh && cd .. && \
    export PATH="/opt/occlum/build/bin:/usr/local/occlum/bin:$PATH" && \
    cd glibc && ./build.sh && cd .. && \
    cd rust && ./build.sh && cd .. && \
    cd bash && ./build.sh && cd .. && \
    cd busybox && ./build.sh && \
    export PATH="/opt/occlum/toolchains/rust/bin:$PATH" && \
    cd /root/occlum && source /opt/intel/sgxsdk/environment && \
    make submodule && OCCLUM_RELEASE_BUILD=1 make install && \
    mkdir -p /opt/occlum/ && \
    cp /root/occlum/tools/docker/start_aesm.sh /opt/occlum/ && \
    rm -rf /opt/occlum/toolchains/rust && \
    rm -rf /root/occlum && \
    rm -f /opt/occlum/etc/template/Enclave.pem

ENV PATH="/opt/occlum/build/bin:/usr/local/occlum/bin:$PATH"
ENV LD_LIBRARY_PATH="/opt/intel/sgxsdk/sdk_libs"

# Clean up
RUN rm -rf /tmp/* && \
    apt purge -y linux-libc-dev bison python3 \
        libpython3.8 wget libprotobuf-dev protobuf-compiler && \
    apt autoremove -y && \
    apt update && apt install -y libfuse2 && \
    rustup self uninstall -y

# Start AESM service automatically
#
# To do so, we add the script to ~/.bashrc. We cannot use systemd to run AESM
# as a "real" service since the pid 1 is not systemd in Docker. So we start
# up AESM service when an user login with an interactive shell.
RUN mkdir -p /var/run/aesmd && echo '/opt/occlum/start_aesm.sh' >> /root/.bashrc

WORKDIR /root
